import { graphQLResultHasError } from '../utilities/common/errorHandling.js';
import { isNonEmptyArray } from '../utilities/common/arrays.js';
import { equal } from '@wry/equality';
import { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';

var QueryInfo = (function () {
    function QueryInfo(cache) {
        this.cache = cache;
        this.listeners = new Set();
        this.document = null;
        this.lastRequestId = 1;
        this.observableQuery = null;
        this.subscriptions = new Set();
        this.dirty = false;
        this.diff = null;
    }
    QueryInfo.prototype.init = function (query) {
        var networkStatus;
        if (this.variables &&
            this.networkStatus !== NetworkStatus.loading &&
            !equal(this.variables, query.variables)) {
            networkStatus = NetworkStatus.setVariables;
        }
        else if (query.isPoll) {
            networkStatus = NetworkStatus.poll;
        }
        else if (query.isRefetch) {
            networkStatus = NetworkStatus.refetch;
        }
        else {
            networkStatus = NetworkStatus.loading;
        }
        Object.assign(this, {
            document: query.document,
            variables: query.variables,
            networkError: null,
            graphQLErrors: this && this.graphQLErrors || [],
            networkStatus: networkStatus,
        });
        if (query.observableQuery) {
            this.observableQuery = query.observableQuery;
        }
        if (query.lastRequestId) {
            this.lastRequestId = query.lastRequestId;
        }
        return this;
    };
    QueryInfo.prototype.setDirty = function () {
        var _this = this;
        if (!this.dirty) {
            this.dirty = true;
            if (!this.notifyTimeout) {
                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);
            }
        }
        return this;
    };
    QueryInfo.prototype.setDiff = function (diff) {
        var _a, _b;
        var oldDiff = this.diff;
        this.diff = diff;
        if (!this.dirty && ((_a = diff) === null || _a === void 0 ? void 0 : _a.result) !== ((_b = oldDiff) === null || _b === void 0 ? void 0 : _b.result)) {
            this.setDirty();
        }
    };
    QueryInfo.prototype.getDiff = function () {
        if (!this.diff) {
            var oq = this.observableQuery;
            var lastResult = oq && oq.getLastResult();
            var lastError = oq && oq.getLastError();
            var fetchPolicy = oq && oq.options.fetchPolicy || "cache-first";
            var errorPolicy = this.getErrorPolicy();
            var errorStatusChanged = errorPolicy !== 'none' &&
                (lastError && lastError.graphQLErrors) !== this.graphQLErrors;
            if (lastResult && lastResult.data && !errorStatusChanged) {
                this.diff = {
                    result: lastResult.data,
                    complete: true,
                };
            }
            else if (fetchPolicy !== "no-cache" &&
                fetchPolicy !== "network-only") {
                this.diff = this.cache.diff({
                    query: this.document,
                    variables: this.variables,
                    returnPartialData: true,
                    optimistic: true,
                });
            }
        }
        return this.diff;
    };
    QueryInfo.prototype.getErrorPolicy = function () {
        var oq = this.observableQuery;
        return oq && oq.options.errorPolicy || "none";
    };
    QueryInfo.prototype.notify = function () {
        var _this = this;
        if (this.notifyTimeout) {
            clearTimeout(this.notifyTimeout);
            this.notifyTimeout = void 0;
        }
        if (this.shouldNotify() && this.getDiff()) {
            this.listeners.forEach(function (listener) { return listener(_this); });
        }
        this.dirty = false;
    };
    QueryInfo.prototype.shouldNotify = function () {
        if (!this.dirty || !this.listeners.size) {
            return false;
        }
        if (!this.observableQuery) {
            return true;
        }
        var _a = this.observableQuery.options, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;
        if (fetchPolicy === "standby") {
            return false;
        }
        if (isNetworkRequestInFlight(this.networkStatus)) {
            var lastResult = this.observableQuery.getLastResult();
            var networkStatusChanged = !!(lastResult &&
                lastResult.networkStatus !== this.networkStatus);
            var shouldNotifyIfLoading = returnPartialData ||
                this.networkStatus === NetworkStatus.setVariables ||
                (networkStatusChanged && notifyOnNetworkStatusChange) ||
                fetchPolicy === 'cache-only' ||
                fetchPolicy === 'cache-and-network';
            if (!shouldNotifyIfLoading) {
                return false;
            }
        }
        return true;
    };
    QueryInfo.prototype.stop = function () {
        this.cancel();
        delete this.cancel;
        this.variables =
            this.networkStatus =
                this.networkError =
                    this.graphQLErrors = void 0;
    };
    QueryInfo.prototype.cancel = function () { };
    QueryInfo.prototype.updateWatch = function (options) {
        var _this = this;
        this.cancel();
        var previousResult = function () {
            var previousResult = null;
            var observableQuery = _this.observableQuery;
            if (observableQuery) {
                var lastResult = observableQuery.getLastResult();
                if (lastResult) {
                    previousResult = lastResult.data;
                }
            }
            return previousResult;
        };
        this.cancel = this.cache.watch({
            query: this.document,
            variables: options.variables,
            optimistic: true,
            previousResult: previousResult,
            callback: function (diff) {
                _this.setDiff(diff);
            },
        });
        return this;
    };
    QueryInfo.prototype.markResult = function (result, _a, allowCacheWrite, makeReady) {
        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;
        if (fetchPolicy === 'no-cache') {
            this.setDiff({ result: result.data, complete: true });
        }
        else if (allowCacheWrite) {
            var ignoreErrors = errorPolicy === 'ignore' || errorPolicy === 'all';
            var writeWithErrors = !graphQLResultHasError(result);
            if (!writeWithErrors && ignoreErrors && result.data) {
                writeWithErrors = true;
            }
            if (writeWithErrors) {
                this.cache.write({
                    result: result.data,
                    dataId: 'ROOT_QUERY',
                    query: this.document,
                    variables: variables,
                });
            }
        }
        if (makeReady) {
            this.networkError = null;
            this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];
            this.networkStatus = NetworkStatus.ready;
        }
    };
    QueryInfo.prototype.markError = function (error) {
        this.networkError = error;
        this.networkStatus = NetworkStatus.error;
    };
    return QueryInfo;
}());

export { QueryInfo };
//# sourceMappingURL=QueryInfo.js.map
